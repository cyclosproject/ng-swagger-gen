{{{operationComments}}}{{operationName}}Response({{#operationParamsClass
  }}params: {{serviceClass}}.{{operationParamsClass}}{{/operationParamsClass}}{{^operationParamsClass
  }}{{#operationParameters}}{{paramVar}}{{^paramRequired}}?{{/paramRequired}}: {{{paramType
  }}}{{^paramIsLast}},
    {{/paramIsLast}}{{/operationParameters}}{{/operationParamsClass
    }}): __Observable<{{{operationHttpResponseType}}}> {
    let __params = this.newParams();
    let __headers = new HttpHeaders();
    let __body: any = null;{{#operationIsMultipart}}
    let __formData = new FormData();
    __body = __formData;{{/operationIsMultipart}}
{{#operationParameters}}{{>parameter}}
{{/operationParameters}}
    return {{#tokenParameter}}this.tokenProvider('{{paramName}}'){{/tokenParameter}}{{^tokenParameter}}__of(null){{/tokenParameter}}.pipe(
      __switchMap(_token => {
        {{#tokenParameter}}if (_token != null) __headers = __headers.set('{{paramName}}', _token.toString());
        {{/tokenParameter}}let req = new HttpRequest<any>(
          '{{operationMethod}}',
          this.rootUrl + `{{{operationPathExpression}}}`,
          __body,
          {
            headers: __headers,
            params: __params,
            responseType: '{{{operationResponseType}}}'
          });

        return this.http.request<any>(req);
      }),
      __filter(_r => _r instanceof HttpResponse),
      __map((_r) => {
        {{#operationIsVoid}}return (_r as HttpResponse<any>).clone({ body: null }) as {{{operationHttpResponseType}}}{{/operationIsVoid
        }}{{#operationIsNumber}}return (_r as HttpResponse<any>).clone({ body: parseFloat((_r as HttpResponse<any>).body as string) }) as {{{operationHttpResponseType}}}{{/operationIsNumber
        }}{{#operationIsBoolean}}return (_r as HttpResponse<any>).clone({ body: (_r as HttpResponse<any>).body === 'true' }) as {{{operationHttpResponseType}}}{{/operationIsBoolean
        }}{{#operationIsOther}}return _r as {{{operationHttpResponseType}}};{{/operationIsOther}}
      })
    );
  }